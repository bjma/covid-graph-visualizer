"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Sigma.js WebGL Renderer Node Program
 * =====================================
 *
 * Simple program rendering nodes using GL_POINTS. This is faster than the
 * three triangle option but has some quirks and is not supported equally by
 * every GPU.
 */
var program_1 = __importDefault(require("./program"));
var utils_1 = require("../utils");
var node_fast_vert_glsl_1 = __importDefault(require("../shaders/node.fast.vert.glsl.js"));
var node_fast_frag_glsl_1 = __importDefault(require("../shaders/node.fast.frag.glsl.js"));
var POINTS = 1, ATTRIBUTES = 4;
var NodeProgramFast = /** @class */ (function (_super) {
    __extends(NodeProgramFast, _super);
    function NodeProgramFast(gl) {
        var _this = _super.call(this, gl, node_fast_vert_glsl_1.default, node_fast_frag_glsl_1.default) || this;
        var program = _this.program;
        // Locations
        _this.positionLocation = gl.getAttribLocation(program, "a_position");
        _this.sizeLocation = gl.getAttribLocation(program, "a_size");
        _this.colorLocation = gl.getAttribLocation(program, "a_color");
        _this.matrixLocation = gl.getUniformLocation(program, "u_matrix");
        _this.ratioLocation = gl.getUniformLocation(program, "u_ratio");
        _this.scaleLocation = gl.getUniformLocation(program, "u_scale");
        // Bindings
        gl.enableVertexAttribArray(_this.positionLocation);
        gl.enableVertexAttribArray(_this.sizeLocation);
        gl.enableVertexAttribArray(_this.colorLocation);
        gl.vertexAttribPointer(_this.positionLocation, 2, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0);
        gl.vertexAttribPointer(_this.sizeLocation, 1, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8);
        gl.vertexAttribPointer(_this.colorLocation, 4, gl.UNSIGNED_BYTE, true, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 12);
        return _this;
    }
    NodeProgramFast.prototype.allocate = function (capacity) {
        this.array = new Float32Array(POINTS * ATTRIBUTES * capacity);
    };
    NodeProgramFast.prototype.process = function (data, offset) {
        var color = utils_1.floatColor(data.color);
        var i = offset * POINTS * ATTRIBUTES;
        var array = this.array;
        if (data.hidden) {
            array[i++] = 0;
            array[i++] = 0;
            array[i++] = 0;
            array[i++] = 0;
            return;
        }
        array[i++] = data.x;
        array[i++] = data.y;
        array[i++] = data.size;
        array[i] = color;
    };
    NodeProgramFast.prototype.bufferData = function () {
        var gl = this.gl;
        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);
    };
    NodeProgramFast.prototype.render = function (params) {
        var gl = this.gl;
        var program = this.program;
        gl.useProgram(program);
        gl.uniform1f(this.ratioLocation, 1 / Math.pow(params.ratio, params.nodesPowRatio));
        gl.uniform1f(this.scaleLocation, params.scalingRatio);
        gl.uniformMatrix3fv(this.matrixLocation, false, params.matrix);
        gl.drawArrays(gl.POINTS, 0, this.array.length / ATTRIBUTES);
    };
    return NodeProgramFast;
}(program_1.default));
exports.default = NodeProgramFast;
