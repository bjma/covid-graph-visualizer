"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Sigma.js WebGL Renderer Triangle Edge Program
 * ==============================================
 *
 * Program rendering directed edges as a single anti-aliased triangle.
 */
var program_1 = __importDefault(require("./program"));
var utils_1 = require("../utils");
var edge_triangle_vert_glsl_1 = __importDefault(require("../shaders/edge.triangle.vert.glsl.js"));
var edge_triangle_frag_glsl_1 = __importDefault(require("../shaders/edge.triangle.frag.glsl.js"));
var POINTS = 3, ATTRIBUTES = 9;
var EdgeTriangleProgram = /** @class */ (function (_super) {
    __extends(EdgeTriangleProgram, _super);
    function EdgeTriangleProgram(gl) {
        var _this = _super.call(this, gl, edge_triangle_vert_glsl_1.default, edge_triangle_frag_glsl_1.default) || this;
        // Locations
        _this.positionLocation = gl.getAttribLocation(_this.program, "a_position");
        _this.normalLocation = gl.getAttribLocation(_this.program, "a_normal");
        _this.thicknessLocation = gl.getAttribLocation(_this.program, "a_thickness");
        _this.colorLocation = gl.getAttribLocation(_this.program, "a_color");
        _this.barycentricLocation = gl.getAttribLocation(_this.program, "a_barycentric");
        _this.resolutionLocation = gl.getUniformLocation(_this.program, "u_resolution");
        _this.ratioLocation = gl.getUniformLocation(_this.program, "u_ratio");
        _this.matrixLocation = gl.getUniformLocation(_this.program, "u_matrix");
        _this.scaleLocation = gl.getUniformLocation(_this.program, "u_scale");
        // Bindings
        gl.enableVertexAttribArray(_this.positionLocation);
        gl.enableVertexAttribArray(_this.normalLocation);
        gl.enableVertexAttribArray(_this.thicknessLocation);
        gl.enableVertexAttribArray(_this.colorLocation);
        gl.enableVertexAttribArray(_this.barycentricLocation);
        gl.vertexAttribPointer(_this.positionLocation, 2, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 0);
        gl.vertexAttribPointer(_this.normalLocation, 2, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 8);
        gl.vertexAttribPointer(_this.thicknessLocation, 1, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 16);
        gl.vertexAttribPointer(_this.colorLocation, 1, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 20);
        gl.vertexAttribPointer(_this.barycentricLocation, 3, gl.FLOAT, false, ATTRIBUTES * Float32Array.BYTES_PER_ELEMENT, 24);
        return _this;
    }
    EdgeTriangleProgram.prototype.allocate = function (capacity) {
        this.array = new Float32Array(POINTS * ATTRIBUTES * capacity);
    };
    EdgeTriangleProgram.prototype.process = function (sourceData, targetData, data, offset) {
        var i = 0;
        if (sourceData.hidden || targetData.hidden || data.hidden) {
            for (var l = i + POINTS * ATTRIBUTES; i < l; i++)
                this.array[i] = 0;
        }
        var thickness = data.size || 1, x1 = sourceData.x, y1 = sourceData.y, x2 = targetData.x, y2 = targetData.y, color = utils_1.floatColor(data.color);
        // Computing normals
        var dx = x2 - x1, dy = y2 - y1;
        var len = dx * dx + dy * dy, n1 = 0, n2 = 0;
        if (len) {
            len = 1 / Math.sqrt(len);
            n1 = -dy * len;
            n2 = dx * len;
        }
        i = POINTS * ATTRIBUTES * offset;
        var array = this.array;
        // TODO: I guess it's not necessary to pass normals to the shader here
        // First point
        array[i++] = x1;
        array[i++] = y1;
        array[i++] = n1;
        array[i++] = n2;
        array[i++] = thickness;
        array[i++] = color;
        array[i++] = 1;
        array[i++] = 0;
        array[i++] = 0;
        // Second point
        array[i++] = x1;
        array[i++] = y1;
        array[i++] = -n1;
        array[i++] = -n2;
        array[i++] = thickness;
        array[i++] = color;
        array[i++] = 0;
        array[i++] = 1;
        array[i++] = 0;
        // Third point
        array[i++] = x2;
        array[i++] = y2;
        array[i++] = 0;
        array[i++] = 0;
        array[i++] = 0;
        array[i++] = color;
        array[i++] = 0;
        array[i++] = 0;
        array[i] = 20;
    };
    EdgeTriangleProgram.prototype.bufferData = function () {
        var gl = this.gl;
        // Vertices data
        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);
    };
    EdgeTriangleProgram.prototype.render = function (params) {
        var gl = this.gl;
        var program = this.program;
        gl.useProgram(program);
        // Binding uniforms
        gl.uniform2f(this.resolutionLocation, params.width, params.height);
        gl.uniform1f(this.ratioLocation, params.ratio / Math.pow(params.ratio, params.edgesPowRatio));
        gl.uniformMatrix3fv(this.matrixLocation, false, params.matrix);
        gl.uniform1f(this.scaleLocation, params.ratio);
        // Drawing:
        gl.drawArrays(gl.TRIANGLES, 0, this.array.length / ATTRIBUTES);
    };
    return EdgeTriangleProgram;
}(program_1.default));
exports.default = EdgeTriangleProgram;
