module.exports=function(n){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return n[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=n,r.c=t,r.d=function(n,t,a){r.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:a})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,t){if(1&t&&(n=r(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)r.d(a,o,function(t){return n[t]}.bind(null,o));return a},r.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(t,"a",t),t},r.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},r.p="",r(r.s=1)}([,function(n,t,r){"use strict";r.r(t),t.default="attribute vec2 a_position;\nattribute vec2 a_normal;\nattribute float a_thickness;\nattribute float a_radius;\nattribute vec4 a_color;\nattribute vec3 a_barycentric;\n\nuniform vec2 u_resolution;\nuniform float u_ratio;\nuniform mat3 u_matrix;\nuniform float u_scale;\n\nvarying vec4 v_color;\n// varying vec3 v_barycentric;\n\nconst float arrow_ratio = 0.66;\nconst float bias = 255.0 / 254.0;\n\nvoid main() {\n\n  float da = a_barycentric.x;\n  float db = a_barycentric.y;\n  float dc = a_barycentric.z;\n\n  float pow_ratio = 1.0 / pow(u_ratio, 0.5) * 2.0;\n  float radius = (a_radius - 1.0) * pow_ratio;\n  float thickness = a_thickness * pow_ratio / u_scale;\n  float width = arrow_ratio * thickness / 2.0;\n\n  vec2 delta = vec2(\n      da * ((radius) * a_normal.y)\n    + db * ((radius + thickness) * a_normal.y + width * a_normal.x)\n    + dc * ((radius + thickness) * a_normal.y - width * a_normal.x),\n\n      da * (-(radius) * a_normal.x)\n    + db * (-(radius + thickness) * a_normal.x + width * a_normal.y)\n    + dc * (-(radius + thickness) * a_normal.x - width * a_normal.y)\n  );\n\n  delta /= u_resolution;\n\n  // Scale from [[-1 1] [-1 1]] to the container:\n  vec2 position = (u_matrix * vec3(a_position, 1)).xy;\n  position += delta;\n\n  // Applying\n  gl_Position = vec4(position, 0, 1);\n\n  // v_barycentric = a_barycentric;\n\n  // Extract the color:\n  v_color = a_color;\n  v_color.a *= bias;\n}\n"}]);