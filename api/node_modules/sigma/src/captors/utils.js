"use strict";
exports.__esModule = true;
exports.getWheelDelta = exports.getMouseCoords = exports.getCenter = exports.getHeight = exports.getWidth = exports.getY = exports.getX = void 0;
/**
 * Sigma.js Captor Utils
 * ======================
 *
 * Miscellenous helper functions related to the captors.
 */
var utils_1 = require("../renderers/utils");
/**
 * Extract the local X position from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {number}     The local X value of the mouse.
 */
function getX(e) {
    if (typeof e.offsetX !== "undefined")
        return e.offsetX;
    if (typeof e.clientX !== "undefined")
        return e.clientX;
    throw new Error("sigma/captors/utils.getX: could not extract x from event.");
}
exports.getX = getX;
/**
 * Extract the local Y position from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {number}     The local Y value of the mouse.
 */
function getY(e) {
    if (typeof e.offsetY !== "undefined")
        return e.offsetY;
    if (typeof e.clientY !== "undefined")
        return e.clientY;
    throw new Error("sigma/captors/utils.getY: could not extract y from event.");
}
exports.getY = getY;
/**
 * Extract the width from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {number}     The width of the event's target.
 */
function getWidth(e) {
    var w = e.target.width;
    if (typeof w === "number")
        return w;
    throw new Error("sigma/captors/utils.getWidth: could not extract width from event.");
}
exports.getWidth = getWidth;
/**
 * Extract the height from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {number}     The height of the event's target.
 */
function getHeight(e) {
    var w = e.target.height;
    if (typeof w === "number")
        return w;
    throw new Error("sigma/captors/utils.getHeight: could not extract height from event.");
}
exports.getHeight = getHeight;
/**
 * Extract the center from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {object}     The center of the event's target.
 */
function getCenter(e) {
    var ratio = utils_1.getPixelRatio();
    return {
        x: getWidth(e) / (2 * ratio),
        y: getHeight(e) / (2 * ratio)
    };
}
exports.getCenter = getCenter;
/**
 * Convert mouse coords to sigma coords.
 *
 * @param  {event}   e   - A mouse or touch event.
 * @param  {number}  [x] - The x coord to convert
 * @param  {number}  [y] - The y coord to convert
 *
 * @return {object}
 */
function getMouseCoords(e) {
    return {
        x: getX(e),
        y: getY(e),
        clientX: e.clientX,
        clientY: e.clientY,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey,
        altKey: e.altKey,
        shiftKey: e.shiftKey,
        // TODO: this is not ideal... But I am wondering why we don't just pass the event through
        preventDefault: e.preventDefault.bind(e),
        original: e
    };
}
exports.getMouseCoords = getMouseCoords;
/**
 * Extract the wheel delta from a mouse or touch event.
 *
 * @param  {event}  e - A mouse or touch event.
 * @return {number}     The wheel delta of the mouse.
 */
function getWheelDelta(e) {
    // TODO: check those ratios again to ensure a clean Chrome/Firefox compat
    if (typeof e.deltaY !== "undefined")
        return (e.deltaY * -3) / 360;
    if (typeof e.detail !== "undefined")
        return e.detail / -9;
    throw new Error("sigma/captors/utils.getDelta: could not extract delta from event.");
}
exports.getWheelDelta = getWheelDelta;
