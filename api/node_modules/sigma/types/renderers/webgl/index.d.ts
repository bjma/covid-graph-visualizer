import Renderer from "../../renderer";
import Camera from "../../camera";
import QuadTree from "../../quadtree";
/**
 * Main class.
 *
 * @constructor
 * @param {Graph}       graph     - Graph to render.
 * @param {HTMLElement} container - DOM container in which to render.
 * @param {object}      settings  - Optional settings.
 */
export default class WebGLRenderer extends Renderer {
    settings: {
        [key: string]: any;
    };
    graph: any;
    captors: any;
    container: any;
    elements: any;
    contexts: any;
    listeners: any;
    quadtree: QuadTree;
    nodeDataCache: any;
    edgeDataCache: any;
    nodeExtent: any;
    edgeExtent: any;
    normalizationFunction: any;
    width: number;
    height: number;
    highlightedNodes: Set<any>;
    displayedLabels: Set<string>;
    hoveredNode: any;
    wasRenderedInThisFrame: boolean;
    renderFrame: any;
    renderHighlightedNodesFrame: any;
    needToProcess: boolean;
    needToSoftProcess: boolean;
    nodePrograms: any;
    edgePrograms: any;
    camera: Camera;
    constructor(graph: any, container: any, settings?: {});
    /**---------------------------------------------------------------------------
     * Internal methods.
     **---------------------------------------------------------------------------
     */
    /**
     * Internal function used to create a canvas context and add the relevant
     * DOM elements.
     *
     * @param  {string}  id    - Context's id.
     * @param  {boolean} webgl - Whether the context is a webgl or canvas one.
     * @return {WebGLRenderer}
     */
    createContext(id: any, webgl?: boolean): this;
    /**
     * Method used to initialize display data cache.
     *
     * @return {WebGLRenderer}
     */
    initializeCache(): void;
    /**
     * Method binding camera handlers.
     *
     * @return {WebGLRenderer}
     */
    bindCameraHandlers(): this;
    /**
     * Method binding event handlers.
     *
     * @return {WebGLRenderer}
     */
    bindEventHandlers(): this;
    /**
     * Method binding graph handlers
     *
     * @return {WebGLRenderer}
     */
    bindGraphHandlers(): this;
    /**
     * Method used to process the whole graph's data.
     *
     * @return {WebGLRenderer}
     */
    process(keepArrays?: boolean): this;
    /**
     * Method used to process a single node.
     *
     * @return {WebGLRenderer}
     */
    processNode(key: any): this;
    /**
     * Method used to process a single edge.
     *
     * @return {WebGLRenderer}
     */
    processEdge(key: any): this;
    /**---------------------------------------------------------------------------
     * Public API.
     **---------------------------------------------------------------------------
     */
    /**
     * Method returning the renderer's camera.
     *
     * @return {Camera}
     */
    getCamera(): Camera;
    /**
     * Method returning the mouse captor.
     *
     * @return {Camera}
     */
    getMouseCaptor(): any;
    /**
     * Method used to resize the renderer.
     *
     * @param  {number} width  - Target width.
     * @param  {number} height - Target height.
     * @return {WebGLRenderer}
     */
    resize(width?: number, height?: number): WebGLRenderer;
    /**
     * Method used to clear the canvases.
     *
     * @return {WebGLRenderer}
     */
    clear(): this;
    /**
     * Method used to render.
     *
     * @return {WebGLRenderer}
     */
    render(): this;
    /**
     * Method used to render labels.
     *
     * @return {WebGLRenderer}
     */
    renderLabels(): this;
    /**
     * Method used to render edge labels, based on which node labels were
     * rendered.
     *
     * @return {WebGLRenderer}
     */
    renderEdgeLabels(): this;
    /**
     * Method used to render the highlighted nodes.
     *
     * @return {WebGLRenderer}
     */
    renderHighlightedNodes(): void;
    /**
     * Method used to schedule a render.
     *
     * @return {WebGLRenderer}
     */
    scheduleRender(): this;
    /**
     * Method used to schedule a hover render.
     *
     * @return {WebGLRenderer}
     */
    scheduleHighlightedNodesRender(): this;
    /**
     * Method used to manually refresh.
     *
     * @return {WebGLRenderer}
     */
    refresh(): this;
    /**
     * Method used to highlight a node.
     *
     * @param  {string} key - The node's key.
     * @return {WebGLRenderer}
     */
    highlightNode(key: any): this;
    /**
     * Method used to unhighlight a node.
     *
     * @param  {string} key - The node's key.
     * @return {WebGLRenderer}
     */
    unhighlightNode(key: any): this;
    /**
     * Method used to shut the container & release event listeners.
     *
     * @return {undefined}
     */
    kill(): void;
}
