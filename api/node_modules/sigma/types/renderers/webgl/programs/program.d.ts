/**
 * Program class.
 *
 * @constructor
 */
export default class Program {
    gl: WebGLRenderingContext;
    array: Float32Array;
    buffer: WebGLBuffer;
    vertexShaderSource: string;
    vertexShader: WebGLShader;
    fragmentShaderSource: string;
    fragmentShader: WebGLShader;
    program: WebGLProgram;
    constructor(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string);
    /**
     * Method used to load the program into a webgl context.
     *
     * @param  {WebGLContext} gl - The WebGL context.
     * @return {WebGLProgram}
     */
    load(gl: any): WebGLProgram;
}
/**
 * Helper function combining two or more programs into a single compound one.
 * Note that this is more a quick & easy way to combine program than a really
 * performant option. More performant programs can be written entirely.
 *
 * @param  {array}    programClasses - Program classes to combine.
 * @return {function}
 */
export declare function createCompoundProgram(programClasses: any): {
    new (gl: any): {
        programs: any;
        allocate(capacity: any): void;
        process(): void;
        computeIndices(): void;
        bufferData(): void;
        render(): void;
    };
};
