"use strict";
exports.__esModule = true;
exports.animateNodes = void 0;
/**
 * Sigma.js Animation Helpers
 * ===========================
 *
 * Handy helper functions dealing with nodes & edges attributes animation.
 */
var utils_1 = require("./utils");
var easings = require("./easings");
/**
 * Defaults.
 */
var ANIMATE_DEFAULTS = {
    easing: "quadraticInOut",
    duration: 150
};
/**
 * Function used to animate the nodes.
 */
function animateNodes(graph, targets, options, callback) {
    options = utils_1.assign({}, ANIMATE_DEFAULTS, options);
    var easing = typeof options.easing === "function" ? options.easing : easings[options.easing];
    var start = Date.now();
    var startPositions = {};
    for (var node in targets) {
        var attrs = targets[node];
        startPositions[node] = {};
        for (var k in attrs)
            startPositions[node][k] = graph.getNodeAttribute(node, k);
    }
    var frame = null;
    var step = function () {
        var p = (Date.now() - start) / options.duration;
        if (p >= 1) {
            // Animation is done
            for (var node in targets) {
                var attrs = targets[node];
                for (var k in attrs)
                    graph.setNodeAttribute(node, k, attrs[k]);
            }
            if (typeof callback === "function")
                callback();
            return;
        }
        p = easing(p);
        for (var node in targets) {
            var attrs = targets[node];
            var s = startPositions[node];
            for (var k in attrs)
                graph.setNodeAttribute(node, k, attrs[k] * p + s[k] * (1 - p));
        }
        frame = requestAnimationFrame(step);
    };
    step();
    return function () {
        if (frame)
            cancelAnimationFrame(frame);
    };
}
exports.animateNodes = animateNodes;
